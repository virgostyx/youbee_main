# Generated by Django 4.0.2 on 2022-03-22 18:58

import autoslug.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import entities.models
import model_utils.fields
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a department name', max_length=24, verbose_name='Name')),
            ],
            options={
                'ordering': ['entity', 'name'],
                'permissions': [('unlink_department', 'Can unlink department')],
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug_name', autoslug.fields.AutoSlugField(editable=False, max_length=200, populate_from=entities.models._employee_slug_fields, unique=True)),
                ('title', models.CharField(choices=[('1', 'Mr'), ('2', 'Mrs'), ('3', 'Ms')], default='1', help_text='Select a title in the list.', max_length=1)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undefined')], default='U', max_length=1)),
                ('email2', models.EmailField(blank=True, max_length=48)),
                ('phone1', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region=None)),
                ('phone2', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region=None)),
                ('whatsapp', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='Enter a whatsapp number', max_length=128, region=None)),
                ('twitter', models.CharField(blank=True, help_text='Enter a Twitter account', max_length=15)),
                ('status', model_utils.fields.StatusField(choices=[('not sent', 'not sent'), ('initiated', 'initiated'), ('sent', 'sent'), ('confirmed OK', 'confirmed OK'), ('confirmed not OK', 'confirmed not OK')], default='not sent', editable=False, max_length=100, no_check_for_status=True)),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, editable=False, monitor='status')),
                ('initiated_on', model_utils.fields.MonitorField(default=django.utils.timezone.now, editable=False, monitor='status', when={'initiated'})),
                ('sent_on', model_utils.fields.MonitorField(default=django.utils.timezone.now, editable=False, monitor='status', when={'sent'})),
                ('confirmed_on', model_utils.fields.MonitorField(default=django.utils.timezone.now, editable=False, monitor='status', when={'confirmed OK', 'confirmed not OK'})),
                ('is_manager', models.BooleanField(default=False, editable=False)),
            ],
            options={
                'ordering': ['user__last_name', 'user__first_name'],
                'permissions': [('unlink_employee', 'Can unlink employee')],
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the entity you are working for. Please make sure it is correct', max_length=48, unique=True, verbose_name='Name')),
                ('slug_name', autoslug.fields.AutoSlugField(editable=False, max_length=54, populate_from='name', unique=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name_plural': 'entities',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EntityDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone1', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='Enter a phone number', max_length=128, region=None, verbose_name='Phone1')),
                ('phone2', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='Enter a phone number', max_length=128, region=None, verbose_name='Phone2')),
                ('email1', models.EmailField(blank=True, help_text='Enter an email address', max_length=48, verbose_name='Email1')),
                ('email1_checked', models.BooleanField(default=False, editable=False)),
                ('email2', models.EmailField(blank=True, help_text='Enter an email address', max_length=48, verbose_name='Email2')),
                ('email2_checked', models.BooleanField(default=False, editable=False)),
                ('address1', models.CharField(blank=True, help_text='Enter an address', max_length=128, verbose_name='Address1')),
                ('address2', models.CharField(blank=True, help_text='Enter an address', max_length=128, verbose_name='Address2')),
                ('city', models.CharField(blank=True, help_text='Enter a city', max_length=32, verbose_name='City')),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, verbose_name='Country')),
                ('zip_code', models.CharField(blank=True, help_text='Enter a zip code', max_length=16, verbose_name='Zip Code')),
            ],
            options={
                'verbose_name_plural': 'entity_details',
            },
        ),
        migrations.CreateModel(
            name='EntityGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the entity group you are working for. Please make sure it is correct', max_length=48, unique=True)),
                ('description', models.CharField(help_text='Enter a description of the purpose of this group', max_length=255)),
                ('slug_name', autoslug.fields.AutoSlugField(editable=False, max_length=54, populate_from='name', unique=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('status', models.BooleanField(default=False)),
                ('validity_start', models.DateTimeField()),
                ('validity_end', models.DateField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'entity_groups',
            },
        ),
        migrations.CreateModel(
            name='EntityGroupMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', model_utils.fields.StatusField(choices=[('not sent', 'not sent'), ('sent', 'sent'), ('OK', 'OK'), ('NOK', 'NOK')], default='not sent', editable=False, max_length=100, no_check_for_status=True)),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, editable=False, monitor='status')),
                ('sent_on', model_utils.fields.MonitorField(default=django.utils.timezone.now, editable=False, monitor='status', when={'sent'})),
                ('confirmed_on', model_utils.fields.MonitorField(default=django.utils.timezone.now, editable=False, monitor='status', when={'NOK', 'OK'})),
                ('entity_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.entitygroup')),
                ('entity_member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.entity')),
            ],
            options={
                'verbose_name_plural': 'entity_group_members',
            },
        ),
        migrations.AddField(
            model_name='entitygroup',
            name='members',
            field=models.ManyToManyField(through='entities.EntityGroupMember', to='entities.Entity'),
        ),
    ]
